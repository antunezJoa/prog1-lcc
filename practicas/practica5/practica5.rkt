#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 104 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1           0 7245 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 183
(6
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname pract"
 #"ica5) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t c"
 #"onstructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Primera parte"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Contactos es:"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; - una lista vacia '() o"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; - una expresi\303\263n del tipo (cons un-nombre-persona Contactos)"
0 0 25 29 1 #"\n"
0 0 17 3 107
(7
 #"; Contactos puede ser una lista vac\303\255a o una lista de contacto"
 #"s encabezada por el String un-nombre-persona."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Ivan\""
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Lautaro\""
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Joaquin\""
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Alvaro\""
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Jeremias\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 7 #"())))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Ivan\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Lautaro\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Joaquin\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Alvaro\""
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Jeremias\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 89
(8
 #"; (cons \"1\" (cons \"2\" '())) es un ejemplo de lista Contactos por"
 #"que \"1\" y \"2\" son Strings"
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(9
 #"; y por lo tanto califican como posible elemento de una lista Contac"
 #"tos"
) 0 0 25 29 1 #"\n"
0 0 17 3 113
(10
 #"; ya que Contactos puede ser una lista vac\303\255a o una lista de c"
 #"ontactos encabezada por el String un-nombre-persona"
) 0 0 25 29 1 #"\n"
0 0 17 3 54
#"; mas all\303\241 de que ninguna persona se llame \"1\" o \"2\"."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 123
(11
 #"; (cons 2 '()) no es un ejemplo de lista de Contactos porque 2 es de"
 #" tipo Number y no String, por lo tanto no califica como"
) 0 0 25 29 1 #"\n"
0 0 17 3 146
(12
 #"; elemento de una lista Contactos ya que Contactos puede ser una lis"
 #"ta vac\303\255a o una lista de contactos encabezada por el String un"
 #"-nombre-persona."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; Una Lista-de-booleanos es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; \342\200\223 (cons Boolean Lista-de-booleanos)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Ejercicio 3.5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Contactos es:"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; - una lista vacia '() o"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; - una expresi\303\263n del tipo (cons un-nombre-persona Contactos)"
0 0 25 29 1 #"\n"
0 0 17 3 107 7 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; contiene-Marcos? : Contactos -> Booleano"
0 0 25 29 1 #"\n"
0 0 17 3 79
(13
 #"; dada una lista de Contactos, determina si \"Marcos\" es un element"
 #"o de la misma"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Sara\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Pedro\""
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Esteban\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 7 #"())))) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 7 #"())))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Juan\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                   [("
0 0 14 3 5 #"cons?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                  "
0 0 22 3 5 #"#true"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 16 #"contiene-Marcos?"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Eugenia\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Luc\303\255a\""
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Dante\""
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Federico\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Gabina\""
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Laura\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Pamela\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 12 #"()))))))))) "
0 0 17 3 10 #"; -> #true"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Cadenas es:"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; - una lista vacia '() o"
0 0 25 29 1 #"\n"
0 0 17 3 65
(14
 #"; - una expresi\303\263n del tipo (cons un-string-cualquiera Contact"
 #"os)"
) 0 0 25 29 1 #"\n"
0 0 17 3 109
(15
 #"; Cadenas puede ser una lista vac\303\255a o una lista de strings cu"
 #"alesquiera encabezada por un String cualquiera."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; contiene? : String Cadenas -> Booleano"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; determina si un string aparece en una lista de string."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Messi\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Sara\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Sara\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Pedro\""
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Esteban\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 7 #"())))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 7 #"())))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Pedro\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Juan\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"Marcos\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                              [("
0 0 14 3 5 #"cons?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                              "
0 0 22 3 5 #"#true"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 9 #"contiene?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 6"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";(contiene-Marcos? (cons \"Marcos\" (cons \"C\" '())))"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; == (contiene-Marcos? (cons \"Marcos\" (list \"C\")))"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; == (contiene-Marcos? (list \"Marcos\" \"C\"))"
0 0 25 29 1 #"\n"
0 0 17 3 185
(16
 #"; == (cond [(empty? (list \"Marco"
 #"s\" \"C\")) #false] [(cons? (list \"Marcos\" \"C\")) (if (string=? ("
 #"first (list \"Marcos\" \"C\")) \"Marcos\") #true (contiene-Marcos? ("
 #"rest (list \"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 163
(17
 #"; == (cond [#false #false] [(cons? (list \"Marcos\" \"C\")) (if (str"
 #"ing=? (first (list \"Marcos\" \"C\")) \"Marcos\") #true (contiene-Ma"
 #"rcos? (rest (list \"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 125
(18
 #"; == (cond [#true (if (string=? (first (list \"Marcos\" \"C\")) \"Ma"
 #"rcos\") #true (contiene-Marcos? (rest (list \"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 109
(19
 #"; == (if (string=? (first (list \"Marcos\" \"C\")) \"Marcos\") #true"
 #" (contiene-Marcos? (rest (list \"Marcos\" \"C\"))))"
) 0 0 25 29 1 #"\n"
0 0 17 3 90
(20
 #"; == (if (string=? \"Marcos\" \"Marcos\") #true (contiene-Marcos? (r"
 #"est (list \"Marcos\" \"C\"))))"
) 0 0 25 29 1 #"\n"
0 0 17 3 67
(21
 #"; == (if #true #true (contiene-Marcos? (rest (list \"Marcos\" \"C\")"
 #")))"
) 0 0 25 29 1 #"\n"
0 0 17 3 10 #"; == #true"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#";(contiene-Marcos? (cons \"A\" (cons \"Marcos\" (cons \"C\" '()))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; == (contiene-Marcos? (cons \"A\" (cons \"Marcos\" (list \"C\"))))"
0 0 25 29 1 #"\n"
0 0 17 3 53
#"; == (contiene-Marcos? (cons \"A\" (list \"Marcos \"C\")))"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; == (contiene-Marcos? (list \"A\" \"Marcos\" \"C\"))"
0 0 25 29 1 #"\n"
0 0 17 3 201
(22
 #"; == (cond [(empty? (list \"A\" \"Marcos\" \"C\")) #false] [(cons? ("
 #"list \"A\" \"Marcos\" \"C\")) (if (string=? (first (list \"A\" \"Mar"
 #"cos\" \"C\")) \"Marcos\") #true (contiene-Marcos? (rest (list \"A\" "
 #"\"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 175
(23
 #"; == (cond [#false #false] [(cons? (list \"A\" \"Marcos\" \"C\")) (i"
 #"f (string=? (first (list \"A\" \"Marcos\" \"C\")) \"Marcos\") #true "
 #"(contiene-Marcos? (rest (list \"A\" \"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 133
(24
 #"; == (cond [#true (if (string=? (first (list \"A\" \"Marcos\" \"C\")"
 #") \"Marcos\") #true (contiene-Mar"
 #"cos? (rest (list \"A\" \"Marcos\" \"C\"))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 89
(25
 #"; == (if (string=? \"A\" \"Marcos\") #true (contiene-Marcos? (rest ("
 #"list \"A\" \"Marcos\" \"C\"))))"
) 0 0 25 29 1 #"\n"
0 0 17 3 72
(26
 #"; == (if #false #true (contiene-Marcos? (rest (list \"A\" \"Marcos\""
 #" \"C\"))))"
) 0 0 25 29 1 #"\n"
0 0 17 3 43 #"; == (contiene-Marcos? (list \"Marcos\" \"C\"))"
0 0 25 29 1 #"\n"
0 0 17 3 185 16 0 0 25 29 1 #"\n"
0 0 17 3 163 17 0 0 25 29 1 #"\n"
0 0 17 3 125 18 0 0 25 29 1 #"\n"
0 0 17 3 90 20 0 0 25 29 1 #"\n"
0 0 17 3 67 21 0 0 25 29 1 #"\n"
0 0 17 3 10 #"; == #true"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49
#"; \302\277Qu\303\251 pasa si reemplazamos a \"Marcos\" con \"B\"?"
0 0 25 29 1 #"\n"
0 0 17 3 101
(27
 #"; En ese caso la funci\303\263n terminar\303\241 retornando #false, "
 #"pues \"Marcos\" no se encontrar\303\255a en la lista."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 7"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; Una Lista-de-montos es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; \342\200\223 (cons NumeroPositivo Lista-de-montos)"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; Lista-de-montos representa una lista con montos de dinero"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #"; contiene-monto? : Lista-de-montos m -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 96
(28
 #"; dado una lista de montos y un monto, determina si ese monto se enc"
 #"uentra en la lista de montos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #") "
0 0 22 3 2 #"20"
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 2 #"10"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 22 3 2 #"10"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"m"
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 2 #" ("
0 0 14 3 15 #"contiene-monto?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"m"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; suma : Lista-de-montos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 124
(29
 #"; toma como entrada una lista con montos de dinero y devuelva como r"
 #"esultado la suma de los montos presentes en dicha lista."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"22"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())) "
0 0 22 3 2 #"25"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; (suma (list 10 12))"
0 0 25 29 1 #"\n"
0 0 17 3 97
(30
 #"; == (cond [(empty? (list 10 12)) 0] [else (+ (first (list 10 12)) ("
 #"suma (rest (list 10 12))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 82
(31
 #"; == (cond [#false 0] [else (+ (first (list 10 12)) (suma (rest (lis"
 #"t 10 12))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 38 #"; == (+ 10 (suma (rest (list 10 12))))"
0 0 25 29 1 #"\n"
0 0 17 3 124
(32
 #"; == (+ 10 (cond [(empty? (rest (list 10 12))) 0] [else (+ (first (r"
 #"est (list 10 12))) (suma (rest (rest (list 10 12)))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 114
(33
 #"; == (+ 10 (cond [(empty? (list 12)) 0] [else (+ (first (rest (list "
 #"10 12))) (suma (rest (rest (list 10 12)))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 102
(34
 #"; == (+ 10 (cond [#false 0] [else (+ (first (rest (list 10 12))) (su"
 #"ma (rest (rest (list 10 12)))))]))"
) 0 0 25 29 1 #"\n"
0 0 17 3 67
#"; == (+ 10 (+ (first (list 12)) (suma (rest (rest (list 10 12))))))"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; == (+ 10 (+ 12 (suma '())))"
0 0 25 29 1 #"\n"
0 0 17 3 83
(35
 #"; == (+ 10 (+ 12 (cond [(empty? '()) 0] [else (+ (first '()) (suma ("
 #"rest '())))])))"
) 0 0 25 29 1 #"\n"
0 0 17 3 76
(36
 #"; == (+ 10 (+ 12 (cond [#true 0] [else (+ (first '()) (suma (rest '("
 #"))))])))"
) 0 0 25 29 1 #"\n"
0 0 17 3 20 #"; == (+ 10 (+ 12 0))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; == (+ 10 12)"
0 0 25 29 1 #"\n"
0 0 17 3 4 #"; 22"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 8"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; Una Lista-de-numeros es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; \342\200\223 (cons Numero Lista-de-numeros)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; pos? : Lista-de-numeros -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 88
(37
 #"; toma una Lista-de-numeros y determina si todos los elementos de la"
 #" lista son positivos"
) 0 0 25 29 1 #"\n"
0 0 17 3 88
(38
 #"; si (pos? l) devuelve #true, entonces l es un elemento del tipo de "
 #"dato Lista-de-montos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 3 #"-25"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"pos?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; (pos? (cons 5 '()))"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; == (pos? (list 5))"
0 0 25 29 1 #"\n"
0 0 17 3 108
(39
 #"; == (cond [(empty? (list 5)) #true] [else (if (positive? (first (li"
 #"st 5))) (pos? (rest (list 5))) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 97
(40
 #"; == (cond [#false #true] [else (if (positive? (first (list 5))) (po"
 #"s? (rest (list 5))) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 53 #"; == (if (positive? 5) (pos? (rest (list 5))) #false)"
0 0 25 29 1 #"\n"
0 0 17 3 45 #"; == (if #true (pos? (rest (list 5))) #false)"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; == (pos? (rest (list 5)))"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; == (pos? '())"
0 0 25 29 1 #"\n"
0 0 17 3 93
(41
 #"; == (cond [(empty? '()) #true] [else (if (positive? (first '())) (p"
 #"os? (rest '())) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 86
(42
 #"; == (cond [#true #true] [else (if (positive? (first '())) (pos? (re"
 #"st '())) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 10 #"; == #true"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; (pos? (cons -1 '()))"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; == (pos? (list -1))"
0 0 25 29 1 #"\n"
0 0 17 3 111
(43
 #"; == (cond [(empty? (list -1)) #true] [else (if (positive? (first (l"
 #"ist -1))) (pos? (rest (list -1))) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 99
(44
 #"; == (cond [#false #true] [else (if (positive? (first (list -1))) (p"
 #"os? (rest (list -1))) #false)])"
) 0 0 25 29 1 #"\n"
0 0 17 3 55 #"; == (if (positive? -1) (pos? (rest (list -1))) #false)"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; == (if #false (pos? (rest (list -1))) #false)"
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; == #false"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; checked-suma : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 56
#"; Esta funci\303\263n recibe como entrada una Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 128
(45
 #"; y devuelve la suma de sus elementos si la lista pertenece a Lista-"
 #"demontos sino deber\303\241 devolver un string indicando un error."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"checked-suma"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 22 3 2 #"75"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"checked-suma"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 3 #"-25"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 19 3 7 #"\"Error\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"checked-suma"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"checked-suma"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pos?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"Error\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 9"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; todos-verdaderos : Lista-de-booleanos -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 143
(46
 #"; una funci\303\263n que recibe como entrada una lista de valores bo"
 #"oleanos y devuelve #true unicamente si todos los elementos de la lis"
 #"ta son #true."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 2 #" ("
0 0 14 3 16 #"todos-verdaderos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; uno-verdadero : Lista-de-booleanos -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 141
(47
 #"; una funci\303\263n que recibe como entrada una lista de valores bo"
 #"oleanos y devuelve #true si al menos uno de los elementos de la list"
 #"a es #true."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 13 #"uno-verdadero"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 10"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; cant-elementos : lista -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; dada una lista, devuelve la cantidad de elementos que contiene."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 11"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; promedio : Lista-de-montos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; que devuelve el promedio de una Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"promedio"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 3 #")) "
0 0 22 3 1 #"7"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"promedio"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #")) "
0 0 22 3 1 #"8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"promedio"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 3 #")) "
0 0 22 3 1 #"7"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"promedio"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 12"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; pares : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 79
(48
 #"; dada una lista de n\303\272meros l"
 #", devuelve una lista con los n\303\272meros pares de l."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pares"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pares"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"pares"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 5 #"pares"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 13"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; lmenor5 : String -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; dado un string devuelve determina si su longitud es menor a 5."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lmenor5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Francia\""
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lmenor5"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"Leo\""
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lmenor5"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #") "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; cortas : Cadenas -> Cadenas"
0 0 25 29 1 #"\n"
0 0 17 3 92
(49
 #"; toma una lista de Cadenas y devuelve una lista con aquellas Cadena"
 #"s de longitud menor a 5."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Lista\""
0 0 25 3 1 #" "
0 0 19 3 4 #"\"de\""
0 0 25 3 1 #" "
0 0 19 3 10 #"\"palabras\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"sin\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"sentido\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"de\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"sin\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lmenor5"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"cortas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 6 #"cortas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 14"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 55 #"; mayores : Lista-de-numeros Number -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 114
(50
 #"; dada una lista de n\303\272meros l y un n\303\272mero n, devuelve "
 #"una lista con aquellos elementos de l que son mayores a n."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mayores"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #") "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mayores"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #") "
0 0 22 3 1 #"8"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mayores"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #") "
0 0 22 3 2 #"10"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mayores"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"mayores"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"mayores"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 6 #") )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 15"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; (define-struct posn [x y])"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; posn es (Number , Number)"
0 0 25 29 1 #"\n"
0 0 17 3 53
#"; interpretaci\303\263n: un elemento en posn representa una"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; posici\303\263n en coordenadas cartesianas"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; Una Lista-de-puntos es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; \342\200\223 (cons (make-posn x y) Lista-de-puntos)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"MAX"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; dist-origen : posn -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 86
(51
 #"; dada una estrucutra (make-posn x y), devuelve la distancia del pun"
 #"to (x,y) al origen"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")) "
0 0 22 3 1 #"5"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"13"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 2 #"24"
0 0 25 3 3 #")) "
0 0 22 3 2 #"25"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sqrt"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 25 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; cercav2 : Lista-de-puntos -> Lista-de-puntos"
0 0 25 29 1 #"\n"
0 0 17 3 163
(52
 #"; toma una lista de puntos del plano (representados mediante estruct"
 #"uras posn), y devuelve la lista de aquellos puntos que est\303\241n "
 #"a distancia menor a MAX de origen"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 14 3 3 #"MAX"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"cercav2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 7 #"cercav2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 16"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; positivos : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 79
(53
 #"; toma una lista de n\303\272meros y se quede s\303\263lo con aquell"
 #"os que son mayores a 0."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positivos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 3 #"-23"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positivos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positivos"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positivos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"positivos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"positivos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 17"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; eliminar : Lista-de-numeros Number -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 120
(54
 #"; dada una lista de n\303\272meros l y un numero n, devuelve la list"
 #"a que resulta de eliminar en l todas las ocurrencias de n."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eliminar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eliminar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eliminar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 2 #") "
0 0 22 3 2 #"-2"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eliminar"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"eliminar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"eliminar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 8 #") ) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 18"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 45 #"; raices : Lista-de-montos -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 92
(55
 #"; dada una lista de n\303\272meros, "
 #"devuelve una lista con las ra\303\255ces cuadradas de sus elementos."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"raices"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"raices"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"raices"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"raices"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 6 #"raices"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 19"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; distancias : Lista-de-puntos -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 96
(56
 #"; dada una lista de puntos del plano, devuelva una lista con la dist"
 #"ancia al origen de cada uno."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 2 #"13"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 10 #"distancias"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 20"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; Una Lista-de-imagenes es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; \342\200\223 (cons Image Lista-de-imagenes)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; anchos : Lista-de-imagenes -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 74
(57
 #"; dada una lista de im\303\241genes, devuelva una lista con el ancho"
 #" de cada una"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"anchos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"60"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"anchos"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"anchos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 6 #"anchos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 21"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sgn2"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 2 #"-1"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                       [("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                       [("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; signos : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 111
(58
 #"; dada una lista de n\303\272meros, devuelve una lista con el result"
 #"ado de aplicarle a cada elemento la funci\303\263n sgn2"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"signos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"45"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 1 #" "
0 0 22 3 3 #"-23"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 5 #"))  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"signos"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"signos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #")("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sgn2"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 6 #"signos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 22"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; cuadrados : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 128
(59
 #"; dada una lista de n\303\272meros, devuelva la lista que resulta de"
 #" elevar al cuadrado cada uno de los elementos de la lista original"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 23"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 41 #"; longitudes : Cadenas -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 116
(60
 #"; dada una lista de cadenas, devuelve la lista de sus longitudes (es"
 #" decir, la cantidad de caracteres que contienen)"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"longitudes"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"hola\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"c\303\263mo\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"est\303\241s?\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"longitudes"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"longitudes"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"longitudes"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 10 #"longitudes"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 24"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; Una Lista-de-temperaturas es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 41 #"; \342\200\223 (cons Number Lista-de-temperaturas)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; FaC : Number -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 81
(61
 #"; dado un numero en grados Fahrenheit, devuelve su equivalente en gr"
 #"ados Celsius."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 3 #"FaC"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 3 #"FaC"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 2 #") "
0 0 22 3 2 #"10"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 3 #"FaC"
0 0 25 3 1 #" "
0 0 22 3 2 #"77"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"FaC"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 3 #")) "
0 0 22 3 1 #"9"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; convertirFC : Lista-de-temperaturas -> Lista-de-temperaturas"
0 0 25 29 1 #"\n"
0 0 17 3 121
(62
 #"; dada una lista de temperaturas en grados Fahrenheit, devuelve esta"
 #" lista de temperaturas convertidas en grados Celsius."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"convertirFC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"77"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"convertirFC"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"convertirFC"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"FaC"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 11 #"convertirFC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 25"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; prod : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 96
(63
 #"; multiplica los elementos de "
 #"una lista de n\303\272meros entr"
 #"e s\303\255. Para la lista vac\303\255a, devuelve 1."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"prod"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 3 #"120"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"prod"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"prod"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"prod"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"prod"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 26"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; pegar : Cadenas -> String"
0 0 25 29 1 #"\n"
0 0 17 3 108
(64
 #"; dada una lista de strings, devuelve el string que se obtiene de co"
 #"ncatenar todos los elementos de la lista"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pegar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Las \""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"lis\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"tas \""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"son \""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"complicadas\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 25 3 3 #")) "
0 0 19 3 29 #"\"Las listas son complicadas.\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pegar"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pegar"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 5 #"pegar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 27"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; maximo : Lista-de-montos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 91
(65
 #"; devuelve el m\303\241ximo de una lista de n\303\272meros naturales"
 #". Para la lista vac\303\255a, devuelve 0."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"maximo"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"23"
0 0 25 3 1 #" "
0 0 22 3 3 #"543"
0 0 25 3 1 #" "
0 0 22 3 3 #"325"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"75"
0 0 25 3 3 #")) "
0 0 22 3 3 #"543"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"maximo"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"maximo"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 25 3 1 #" "
0 0 14 3 3 #"max"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 28"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; sumdist : Lista-de-puntos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 83
(66
 #"; dada una lista de puntos del plano, devuelva la suma de sus distan"
 #"cias al origen."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumdist"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"22"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumdist"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumdist"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 29"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; sumcuad : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 98
(67
 #"; dada una lista de n\303\272meros, devuelve la suma de sus cuadrado"
 #"s. Para la lista vac\303\255a, devuelve 0."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumcuad"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 22 3 2 #"14"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumcuad"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 3 #")) "
0 0 22 3 2 #"91"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumcuad"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumcuad"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Segunda parte"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; paresv2 : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 79 48 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"paresv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"paresv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 5 #"even?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; cortasv2 : Cadenas -> Cadenas"
0 0 25 29 1 #"\n"
0 0 17 3 92 49 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"cortasv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Lista\""
0 0 25 3 1 #" "
0 0 19 3 4 #"\"de\""
0 0 25 3 1 #" "
0 0 19 3 10 #"\"palabras\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"sin\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"sentido\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"de\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"sin\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"cortasv2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"cortasv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 7 #"lmenor5"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; ------------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; distMAXto0 : posn -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 83
(68
 #"; dada una estructura posn determina si esta a una distancia menor a"
 #" MAX del origen"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distMAXto0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distMAXto0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distMAXto0"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 11 #"dist-origen"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #") "
0 0 14 3 3 #"MAX"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; cercav3 : Lista-de-puntos -> Lista-de-puntos"
0 0 25 29 1 #"\n"
0 0 17 3 163 52 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav3"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"cercav3"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 10 #"distMAXto0"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; ------------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; esPositivo? Number -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; dado un numero determina si es positivo o no"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"esPositivo?"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"esPositivo?"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"esPositivo?"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"esPositivo?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 52 #"; positivosv2 : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 79 53 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"positivosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 3 #"-23"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"positivosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"positivosv2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"positivosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 11 #"esPositivo?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; raicesv2 : Lista-de-montos -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 92 55 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"sqrt"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; distancias : Lista-de-puntos -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 96 56 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"distanciasv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 2 #"13"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"distanciasv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"distanciasv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"distanciasv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 11 #"dist-origen"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; Una Lista-de-imagenes es:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 '()"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; \342\200\223 (cons Image Lista-de-imagenes)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; anchosv2 : Lista-de-imagenes -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 74 57 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"anchosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"60"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"anchosv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"anchosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; signosv2 : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 111 58 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"signosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"45"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 1 #" "
0 0 22 3 3 #"-23"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 5 #"))  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"signosv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"signosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #")("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"sgn2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; cuad : Number -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; dado un numero retorna su cuadrado"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cuad"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cuad"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; cuadrados : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 128 59 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cuadradosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cuadradosv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cuadradosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cuadradosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"cuad"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; longitudesv2 : Cadenas -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 116 60 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"longitudesv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"hola\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"c\303\263mo\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"est\303\241s?\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"longitudesv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"longitudesv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"longitudesv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; convertirFCv2 : Lista-de-temperaturas -> Lista-de-temperaturas"
0 0 25 29 1 #"\n"
0 0 17 3 121 62 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"convertirFCv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"77"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"convertirFCv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"convertirFCv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"FaC"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 1 #"c"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; losdos : Boolean Boolean -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; and logico"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"losdos"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"losdos"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 52 #"; todos-verdaderosv2 : Lista-de-booleanos -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 143 46 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 6 #"losdos"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"losdos"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; alguno : Boolean Boolean -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; or logico"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"alguno"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"alguno"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"alguno"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; uno-verdaderov2 : Lista-de-booleanos -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 141 47 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"uno-verdaderov2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 6 #"alguno"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"existe"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; cant-elementosv2 : lista -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; dada una lista, devuelve la cantidad de elementos que contiene."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"cant-elementosv2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"cant-elementosv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 3 #")) "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"cant-elementosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 6 #"existe"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; prodv2 : Lista-de-numeros -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 96 63 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"prodv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 3 #"120"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"prodv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"prodv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"prodv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; pegarv2 : Cadenas -> String"
0 0 25 29 1 #"\n"
0 0 17 3 108 64 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"pegarv2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Las \""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"lis\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"tas \""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"son \""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"complicadas\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 25 3 3 #")) "
0 0 19 3 29 #"\"Las listas son complicadas.\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"pegarv2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"pegarv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; maximov2 : Lista-de-montos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 91 65 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"maximov2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"23"
0 0 25 3 1 #" "
0 0 22 3 3 #"543"
0 0 25 3 1 #" "
0 0 22 3 3 #"325"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"75"
0 0 25 3 3 #")) "
0 0 22 3 3 #"543"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"maximov2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"maximov2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 3 #"max"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"CIRCULOS"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"40"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"60"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"FONDO"
0 0 25 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 3 #"200"
0 0 25 3 1 #" "
0 0 22 3 3 #"200"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 4 #"fold"
0 0 17 3 1 #" "
0 0 17 3 7 #"overlay"
0 0 17 3 1 #" "
0 0 17 3 5 #"FONDO"
0 0 17 3 1 #" "
0 0 17 3 13 #"CIRCULOS) == "
0 6           4 17 1466
(69
 #"(#(struct:overlay #(struct:translate 90 90 #(struct:translate 10 10 "
 #"#(struct:ellipse 20 20 0 255 \"blue\"))) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 80 80 #(struct:translate 20 20 #(str"
 #"uct:ellipse 40 40 0 255 \"yellow\"))) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 70 70 #(struct:translate 30 30 #(struct"
 #":ellipse 60 60 0 255 \"blue\"))) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 60 60 #(struct:translate 40 40 #(struct:elli"
 #"pse 80 80 0 255 \"yellow\"))) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 50 50 #(struct:translate 50 50 #(struct:ellipse"
 #" 100 100 0 255 \"blue\"))) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 40 40 #(struct:translate 60 60 #(struct:ellipse 12"
 #"0 120 0 255 \"yellow\"))) #(struct:translate 0 0 #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 200 0) #(struct:point 200 200) #(stru"
 #"ct:point 0 200)) #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 200 0 0 0) #(struct:pu"
 #"lled-point 0 0 200 200 0 0) #(struct:pulled-point 0 0 0 200 0 0)) ou"
 #"tline #(struct:pen \"black\" 2 solid round round)))) #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 200 0 0 0) #(struct:pulled"
 #"-point 0 0 200 200 0 0) #(struct:pulled-point 0 0 0 200 0 0)) 255 \""
 #"white\")))))))))))))))))) #(struct:bb 200 200 200) #f)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; sumav2 : ListN -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 53
#"; sumav2 todos los elementos de una lista de n\303\272meros"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 2 #"15"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumav2"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 2 #"13"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #")) "
0 0 22 3 2 #"33"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumav2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"fold"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; sumacuad : ListN -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 45 #"; suma los cuadrados de una lista de n\303\272meros"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sumacuad"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 2 #"55"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sumacuad"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sumacuad"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 2 #"13"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #")) "
0 0 22 3 3 #"371"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sumacuad"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cuadrados"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 6"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; sumadist : ListPosn -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 106
(70
 #"; dada una lista l de estructuras posn, devuelve la suma de las dist"
 #"ancias al origen de cada elemento de l"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sumdist"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))) "
0 0 22 3 1 #"8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sumadist"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 10 #"distancias"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 7"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; multPos : ListaN -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 81
(71
 #"; dada una lista de n\303\272meros l, multiplique entre s\303\255 lo"
 #"s n\303\272meros positivos de l"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"multPos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 3 #")) "
0 0 22 3 2 #"12"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"multPos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"prodv2"
0 0 25 3 2 #" ("
0 0 14 3 11 #"positivosv2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 8"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; absolutos : Lista-de-numeros -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 135
(72
 #"; dada una lista de n\303\272meros, devuelva la lista que resulta de"
 #" obtener el valor absoluto cada uno de los elementos de la lista ori"
 #"ginal"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"absolutos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"absolutos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"abs"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; sumAbs : ListaN -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 71
(73
 #"; dada una lista de n\303\272meros, devuelve la suma de sus valores "
 #"absolutos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumAbs"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 3 #")) "
0 0 22 3 2 #"15"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"sumAbs"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"absolutos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Ejercicio 9"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 33 #"; esNoNegativo? Number -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; dado un numero determina si es no negativo"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"esNoNegativo?"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"esNoNegativo?"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"esNoNegativo?"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"esNoNegativo?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 52 #"; noNegativos : Lista-de-numeros -> Lista-de-numeros"
0 0 25 29 1 #"\n"
0 0 17 3 79 53 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"noNegativos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 3 #"-23"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"37"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"noNegativos"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"noNegativos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 13 #"esNoNegativo?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; raicesv3 : ListaN -> Lista-de-montos"
0 0 25 29 1 #"\n"
0 0 17 3 110
(74
 #"; dada una lista de n\303\272meros l,"
 #" devuelve una lista con las ra\303\255ces cuadradas de los n\303\272"
 #"meros no negativos de l"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 1 #" "
0 0 22 3 2 #"-4"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"raicesv3"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"sqrt"
0 0 25 3 2 #" ("
0 0 14 3 11 #"noNegativos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 10"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"; esGorda? : Imagen -> Boolean"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"; dada una imagen determina si es gorda"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"; Diremos que una imagen es gorda si su ancho es mayor a su alto"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"esGorda?"
0 0 17 3 2 #" ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 6 #"\"blue\""
0 0 17 3 3 #")) "
0 0 17 3 2 #"#t"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"esGorda?"
0 0 17 3 2 #" ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 8 #"\"yellow\""
0 0 17 3 3 #")) "
0 0 17 3 2 #"#f"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 8 #"esGorda?"
0 0 17 3 1 #" "
0 0 17 3 5 #"image"
0 0 17 3 3 #") ("
0 0 17 3 1 #">"
0 0 17 3 2 #" ("
0 0 17 3 11 #"image-width"
0 0 17 3 1 #" "
0 0 17 3 5 #"image"
0 0 17 3 3 #") ("
0 0 17 3 12 #"image-height"
0 0 17 3 1 #" "
0 0 17 3 5 #"image"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"; gordas : ListaImagenes -> ListaImagenes"
0 0 17 29 1 #"\n"
0 0 17 3 94
(75
 #"; dada una lista de imagenes devuelve otra lista de imagenes con las"
 #" que califican como gordas"
) 0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 6 #"gordas"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 6 #"circle"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 5 #"\"red\""
0 0 17 3 3 #") ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 6 #"\"blue\""
0 0 17 3 3 #") ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 8 #"\"yellow\""
0 0 17 3 3 #") ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"green\""
0 0 17 3 5 #"))) ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 6 #"\"blue\""
0 0 17 3 3 #") ("
0 0 17 3 9 #"rectangle"
0 0 17 3 1 #" "
0 0 17 3 2 #"30"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"green\""
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 6 #"gordas"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 1 #"'"
0 0 17 3 3 #"())"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 6 #"gordas"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 3 #") ("
0 0 17 3 6 #"filter"
0 0 17 3 1 #" "
0 0 17 3 8 #"esGorda?"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"; detArea : Imagen -> Number"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"; dada una imagen determina su area"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 7 #"detArea"
0 0 17 3 2 #" ("
0 0 17 3 6 #"circle"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 5 #"\"red\""
0 0 17 3 3 #")) "
0 0 17 3 19 #"#i78.53981633974483"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 7 #"detArea"
0 0 17 3 2 #" ("
0 0 17 3 12 #"rectangle 40"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 6 #"\"blue\""
0 0 17 3 7 #")) 800)"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(define (detArea i) )"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"; areas : ListaImagenes -> ListaN"
0 0 17 29 1 #"\n"
0 0 17 3 78
(76
 #"; dada una lista de imagenes retorna una lista de las areas de dicha"
 #"s imagenes"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"; sag : ListaImagenes -> Number"
0 0 17 29 1 #"\n"
0 0 17 3 64
(77
 #"; dada una lista de im\303\241gene"
 #"s, devuelva la suma de las \303\241reas de"
) 0 0 17 3 1 #" "
0 0 17 3 8 #"aquellas"
0 0 17 3 19 #" im\303\241genes \"Gordas\""
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 11"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; unoPositivo? : Lista-ListaN -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 92
(78
 #"; dada una lista de numeros positivos, determina si al menos uno de "
 #"esos numeros es positivo"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 11 #"esPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; algun-pos : ListaN -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 124
(79
 #"; toma una lista de listas de n\303\272meros y devuelve #true si y s"
 #"\303\263lo si para alguna lista la suma de sus elementos es positiva"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"algun-pos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-4"
0 0 25 3 1 #" "
0 0 22 3 2 #"-2"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 2 #"-9"
0 0 25 3 1 #" "
0 0 22 3 2 #"-7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 4 #"))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"algun-pos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"algun-pos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-4"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"algun-pos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 12 #"unoPositivo?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 6 #"sumav2"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 12"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; longM4 : ListaX -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 79
(80
 #"; dada una lista de elementos cualquiera, determina su su longitud e"
 #"s mayor a 4"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"longM4"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"longM4"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"longM4"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cant-elementos"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; long-lists : Lista-Lista -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 111
(81
 #"; toma una lista de listas y devuelve #true si y s\303\263lo si las "
 #"longitudes de todas las sublistas son mayores a 4"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"long-lists"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"87"
0 0 25 3 1 #" "
0 0 22 3 2 #"73"
0 0 25 3 1 #" "
0 0 22 3 2 #"78"
0 0 25 3 1 #" "
0 0 22 3 2 #"83"
0 0 25 3 1 #" "
0 0 22 3 2 #"33"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"long-lists"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 22 3 1 #"'"
0 0 25 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"long-lists"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"long-lists"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 6 #"longM4"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 13"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; delNoBool : ListaX -> ListaB"
0 0 25 29 1 #"\n"
0 0 17 3 111
(82
 #"; dada una lista de elementos cualquiera devuelve una lista solo con"
 #" los valores booleanos de la anterior lista"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"abc\""
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"def\""
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 2 #") "
0 0 22 3 3 #"-12"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 9 #")) ) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; todos-true : ListaX -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 116
(83
 #"; toma una lista de valores de cualquier tipo, y determina si todos "
 #"los valores booleanos de la lista son verdaderos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"todos-true"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"abc\""
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"def\""
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"todos-true"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"todos-true"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 25 3 2 #") "
0 0 19 3 5 #"\"abc\""
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"def\""
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"todos-true"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 5 #"#true"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 2 #") "
0 0 22 3 3 #"-12"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"todos-true"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"delNoBool"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Ejercicio 14"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"alumno"
0 0 25 3 2 #" ["
0 0 14 3 6 #"nombre"
0 0 25 3 1 #" "
0 0 14 3 4 #"nota"
0 0 25 3 1 #" "
0 0 14 3 6 #"faltas"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 52
#"; alumno (String, Number, Natural). Interpretaci\303\263n:"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; - nombre representa el nombre del alumno."
0 0 25 29 1 #"\n"
0 0 17 3 75
(84
 #"; - nota representa la calificaci\303\263n obtenida por el alumno (e"
 #"ntre 0 y 10)."
) 0 0 25 29 1 #"\n"
0 0 17 3 58
(85
 #"; - faltas: n\303\272mero de clase"
 #"s a las el alumno no asisti\303\263."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; mayor9 : alumno -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; dado un alumno determina si es destacado o no"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"mayor9"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"mayor9"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"mayor9"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 2 #" ("
0 0 14 3 11 #"alumno-nota"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; listaNombres : Lista-alumnos -> ListaStrings"
0 0 25 29 1 #"\n"
0 0 17 3 77
(86
 #"; dada una lista de alumnos devuelve una lista con los nombres de lo"
 #"s alumnos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"listaNombres"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"listaNombres"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"alumno-nombre"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 12 #"listaNombres"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; destacados : Lista-alumnos -> ListaStrings"
0 0 25 29 1 #"\n"
0 0 17 3 120
(87
 #"; dada una lista de alumnos, devuelve una lista con el nombre de aqu"
 #"ellos alumnos que sacaron una nota mayor o igual a 9"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"destacados"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"destacados"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 12 #"listaNombres"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 6 #"mayor9"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; condicion : alumno -> String"
0 0 25 29 1 #"\n"
0 0 17 3 77
(88
 #"; dado un alumno, determine su condici\303\263n de acuerdo a las sig"
 #"uientes reglas:"
) 0 0 25 29 1 #"\n"
0 0 17 3 64
(89
 #"; si la nota es mayor o igual a 8, su condici\303\263n es \"promovid"
 #"o\"."
) 0 0 25 29 1 #"\n"
0 0 17 3 52
#"; Si la nota es menor a 6, su condici\303\263n es \"libre\"."
0 0 25 29 1 #"\n"
0 0 17 3 53
#"; En cualquier otro caso, la condici\303\263n es \"regular\"."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")) "
0 0 19 3 11 #"\"Promovido\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Tyga\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 19 3 7 #"\"Libre\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Swae Lee\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 19 3 9 #"\"Regular\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #" ("
0 0 14 3 11 #"alumno-nota"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #")) "
0 0 19 3 11 #"\"Promovido\""
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                            [("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #" ("
0 0 14 3 11 #"alumno-nota"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #")) "
0 0 19 3 7 #"\"Libre\""
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"Regular\""
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; estaLibre? : alumno -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 41 #"; dado un alumno determina si est\303\241 libre"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"estaLibre?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"Tyga\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"estaLibre?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"estaLibre?"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"Libre\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; exito : Lista-alumnos -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 99
(90
 #"; dada una lista de alumnos, devuelve #true si ninguno est\303\241 l"
 #"ibre. Caso contrario, devuelve #false"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 5 #"exito"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Juan Computaci\303\263n\""
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 2 #"13"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 4 #"))) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 5 #"exito"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"Post Malone\""
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Quavo\""
0 0 25 3 1 #" "
0 0 22 3 3 #"7.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 4 #"))) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"exito"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 18 #"todos-verdaderosv2"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 10 #"estaLibre?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; estaRegular? : alumno -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; dado un alumno determina si est\303\241 regular"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"estaRegular?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Swae Lee\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"estaRegular?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"estaRegular?"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 19 3 9 #"\"Regular\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"; getRegulares : Lista-alumnos -> Lista-alumnos"
0 0 17 29 1 #"\n"
0 0 17 3 89
(91
 #"; dada una lista de alumnos retorna una lista de los alumnos que cal"
 #"ifican como regulares"
) 0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 18 #"\"Juan Computacion\""
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 17 #"\"Carlos Software\""
0 0 17 3 1 #" "
0 0 17 3 3 #"3.5"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #") ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 14 #"\"Ada Lovelace\""
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 5 #"))) ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 18 #"\"Juan Computacion\""
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 1 #" "
0 0 17 3 5 #"empty"
0 0 17 3 2 #") "
0 0 17 3 5 #"empty"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 14 #"\"Travis Scott\""
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 3 #") ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 13 #"\"Post Malone\""
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 2 #"12"
0 0 17 3 3 #") ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"Quavo\""
0 0 17 3 1 #" "
0 0 17 3 3 #"7.5"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 5 #"))) ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 11 #"make-alumno"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"Quavo\""
0 0 17 3 1 #" "
0 0 17 3 3 #"7.5"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" [("
0 0 17 3 6 #"empty?"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 2 #") "
0 0 17 3 5 #"empty"
0 0 17 3 1 #"]"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"                               ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 6 #"equal?"
0 0 17 3 1 #" "
0 0 17 3 9 #"\"Regular\""
0 0 17 3 2 #" ("
0 0 17 3 9 #"condicion"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"                                         ("
0 0 17 3 6 #"append"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 4 #")) ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"                                         ("
0 0 17 3 12 #"getRegulares"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 1 #"l"
0 0 17 3 7 #")) )]))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; getFaltas : Lista-alumnos -> ListaN"
0 0 25 29 1 #"\n"
0 0 17 3 81
(92
 #"; dada una lista de alumnos retorna una lista con las ausencias de d"
 #"ichos alumnos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Juan Computaci\303\263n\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"Post Malone\""
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"Quavo\""
0 0 25 3 1 #" "
0 0 22 3 3 #"7.5"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"alumno-faltas"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 7 #")) )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; faltas-regulares : Lista-alumnos -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 87
(93
 #"; dada una lista de alumnos, devuelve la suma de las ausencias de lo"
 #"s alumnos regulares"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 16 #"faltas-regulares"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Juan Computaci\303\263n\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #"))) "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"faltas-regulares"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"sumav2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"getFaltas"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 12 #"estaRegular?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; -----------------------------"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; estaPromovido? : alumno -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; dado un alumno determina si est\303\241 regular"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 14 #"estaPromovido?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Swae Lee\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 14 #"estaPromovido?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"estaPromovido?"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"condicion"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 19 3 11 #"\"Promovido\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 33 #"; 3omasfaltas : alumno -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 52 #"; dado un alumno determina si falto a 3 o mas clases"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"3omasfaltas"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Swae Lee\""
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"3omasfaltas"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Travis Scott\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"3omasfaltas"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 13 #"alumno-faltas"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 53 #"; promovidos-ausentes : Lista-alumnos -> ListaStrings"
0 0 25 29 1 #"\n"
0 0 17 3 131
(94
 #"; dada una lista de alumnos, devuelve una lista con el nombre de aqu"
 #"ellos alumnos promovidos que no asistieron a tres o m\303\241s clase"
 #"s"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 19 #"promovidos-ausentes"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Juan Computaci\303\263n\""
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"Carlos Software\""
0 0 25 3 1 #" "
0 0 22 3 3 #"3.5"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-alumno"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"Ada Lovelace\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Juan Computaci\303\263n\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"promovidos-ausentes"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 12 #"listaNombres"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 14 #"estaPromovido?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 11 #"3omasfaltas"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0           0
